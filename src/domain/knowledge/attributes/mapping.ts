import { attribute, AttributeKey } from './key';
import { types } from './type';

interface AttributeValueMapping {
  [attribute._background]: string;
  [attribute.area]: types.Double;
  [attribute.arrowhead]: types.ArrowType;
  [attribute.arrowsize]: types.Double;
  [attribute.arrowtail]: types.ArrowType;
  [attribute.bb]: types.Rect;
  [attribute.bgcolor]: types.Color | types.ColorList;
  [attribute.center]: boolean;
  [attribute.charset]: string;
  [attribute._class]: string;
  [attribute.clusterrank]: types.ClusterMode;
  [attribute.color]: types.Color | types.ColorList;
  [attribute.colorscheme]: string;
  [attribute.comment]: string;
  [attribute.compound]: boolean;
  [attribute.concentrate]: boolean;
  [attribute.constraint]: boolean;
  [attribute.Damping]: types.Double;
  [attribute.decorate]: boolean;
  [attribute.defaultdist]: types.Double;
  [attribute.dim]: types.Int;
  [attribute.dimen]: types.Int;
  [attribute.dir]: types.DirType;
  [attribute.diredgeconstraints]: string | boolean;
  [attribute.distortion]: types.Double;
  [attribute.dpi]: types.Double;
  [attribute.edgehref]: types.EscString;
  [attribute.edgetarget]: types.EscString;
  [attribute.edgetooltip]: types.EscString;
  [attribute.edgeURL]: types.EscString;
  [attribute.epsilon]: types.Double;
  [attribute.esep]: types.AddDouble | types.AddPoint;
  [attribute.fillcolor]: types.Color | types.ColorList;
  [attribute.fixedsize]: boolean | string;
  [attribute.fontcolor]: types.Color;
  [attribute.fontname]: string;
  [attribute.fontnames]: string;
  [attribute.fontpath]: string;
  [attribute.fontsize]: types.Double;
  [attribute.forcelabels]: boolean;
  [attribute.gradientangle]: types.Int;
  [attribute.group]: string;
  [attribute.head_lp]: types.Point;
  [attribute.headclip]: boolean;
  [attribute.headhref]: types.EscString;
  [attribute.headlabel]: types.LblString;
  [attribute.headport]: types.PortPos;
  [attribute.headtarget]: types.EscString;
  [attribute.headtooltip]: types.EscString;
  [attribute.headURL]: types.EscString;
  [attribute.height]: types.Double;
  [attribute.href]: types.EscString;
  [attribute.id]: types.EscString;
  [attribute.image]: string;
  [attribute.imagepath]: string;
  [attribute.imagepos]: string;
  [attribute.imagescale]: string | boolean;
  [attribute.inputscale]: types.Double;
  [attribute.K]: types.Double;
  [attribute.label]: types.LblString;
  [attribute.label_scheme]: types.Int;
  [attribute.labelangle]: types.Double;
  [attribute.labeldistance]: types.Double;
  [attribute.labelfloat]: boolean;
  [attribute.labelfontcolor]: types.Color;
  [attribute.labelfontname]: string;
  [attribute.labelfontsize]: types.Double;
  [attribute.labelhref]: types.EscString;
  [attribute.labeljust]: string;
  [attribute.labelloc]: string;
  [attribute.labeltarget]: types.EscString;
  [attribute.labeltooltip]: types.EscString;
  [attribute.labelURL]: types.EscString;
  [attribute.landscape]: boolean;
  [attribute.layer]: types.LayerRange;
  [attribute.layerlistsep]: string;
  [attribute.layers]: types.LayerList;
  [attribute.layerselect]: types.LayerRange;
  [attribute.layersep]: string;
  [attribute.layout]: string;
  [attribute.len]: types.Double;
  [attribute.levels]: types.Int;
  [attribute.levelsgap]: types.Double;
  [attribute.lhead]: string;
  [attribute.lheight]: types.Double;
  [attribute.lp]: types.Point;
  [attribute.ltail]: string;
  [attribute.lwidth]: types.Double;
  [attribute.margin]: types.Double | types.Point;
  [attribute.maxiter]: types.Int;
  [attribute.mclimit]: types.Double;
  [attribute.mindist]: types.Double;
  [attribute.minlen]: types.Int;
  [attribute.mode]: string;
  [attribute.model]: string;
  [attribute.mosek]: boolean;
  [attribute.newrank]: boolean;
  [attribute.nodesep]: types.Double;
  [attribute.nojustify]: boolean;
  [attribute.normalize]: types.Double | boolean;
  [attribute.notranslate]: boolean;
  [attribute.nslimit]: types.Double;
  [attribute.nslimit1]: types.Double;
  [attribute.ordering]: string;
  [attribute.orientation]: string | types.Double;
  [attribute.outputorder]: types.OutputMode;
  [attribute.overlap]: string | boolean;
  [attribute.overlap_scaling]: types.Double;
  [attribute.overlap_shrink]: boolean;
  [attribute.pack]: boolean | types.Int;
  [attribute.packmode]: types.PackMode;
  [attribute.pad]: types.Double | types.Point;
  [attribute.page]: types.Double | types.Point;
  [attribute.pagedir]: types.Pagedir;
  [attribute.pencolor]: types.Color;
  [attribute.penwidth]: types.Double;
  [attribute.peripheries]: types.Int;
  [attribute.pin]: boolean;
  [attribute.pos]: types.Point | types.SplineType;
  [attribute.quadtree]: types.QuadType | boolean;
  [attribute.quantum]: types.Double;
  [attribute.rank]: types.RankType;
  [attribute.rankdir]: types.Rankdir;
  [attribute.ranksep]: types.Double | types.DoubleList;
  [attribute.ratio]: types.Double | string;
  [attribute.rects]: types.Rect;
  [attribute.regular]: boolean;
  [attribute.remincross]: boolean;
  [attribute.repulsiveforce]: types.Double;
  [attribute.resolution]: types.Double;
  [attribute.root]: string | boolean;
  [attribute.rotate]: types.Int;
  [attribute.rotation]: types.Double;
  [attribute.samehead]: string;
  [attribute.sametail]: string;
  [attribute.samplepoints]: types.Int;
  [attribute.scale]: types.Double | types.Point;
  [attribute.searchsize]: types.Int;
  [attribute.sep]: types.AddDouble | types.AddPoint;
  [attribute.shape]: types.Shape;
  [attribute.shapefile]: string;
  [attribute.showboxes]: types.Int;
  [attribute.sides]: types.Int;
  [attribute.size]: types.Double | types.Point;
  [attribute.skew]: types.Double;
  [attribute.smoothing]: types.SmoothType;
  [attribute.sortv]: types.Int;
  [attribute.splines]: boolean | string;
  [attribute.start]: types.StartType;
  [attribute.style]: types.Style;
  [attribute.stylesheet]: string;
  [attribute.tail_lp]: string;
  [attribute.tailclip]: types.Point;
  [attribute.tailclip]: types.Point;
  [attribute.tailhref]: types.EscString;
  [attribute.taillabel]: types.LblString;
  [attribute.tailport]: types.PortPos;
  [attribute.tailtarget]: types.EscString;
  [attribute.tailtooltip]: types.EscString;
  [attribute.tailURL]: types.EscString;
  [attribute.target]: types.EscString | string;
  [attribute.tooltip]: types.EscString;
  [attribute.truecolor]: boolean;
  [attribute.URL]: types.EscString;
  [attribute.vertices]: types.PointList;
  [attribute.viewport]: types.ViewPort;
  [attribute.voro_margin]: types.Double;
  [attribute.weight]: types.Int | types.Double;
  [attribute.width]: types.Double;
  [attribute.xdotversion]: string;
  [attribute.xlabel]: types.LblString;
  [attribute.xlp]: types.Point;
  [attribute.z]: types.Double;
}

export type Attribute<T extends AttributeKey> = AttributeValueMapping[T];
